#include <stdio.h>

#include "FreeRTOS.h"
#include "task.h"

#include "board_io.h"
#include "common_macros.h"
#include "gpio.h"
#include "uart.h"
#include "sj2_cli.h"
#include "controller_comm.h"
#include "string.h"
//#include "uart_lab.h"

//#define PLAYER_1
#define MASTER

static controller_comm_s controller;
gpio_s gpio_tx, gpio_rx;

QueueHandle_t rx_queue;
QueueHandle_t tx_queue;

char message[] = "Board 1.";

void uart_receive(void *pvParams) {
    char byte = 0;
    while(1) {
        uart__get(UART__3,&byte,portMAX_DELAY);
        // uart_lab__get_char_from_queue(labUART__3,&byte, portMAX_DELAY);
        printf("%c", byte);fflush(stdout);
        if (byte == '.') {
            printf("\n");
        }
    }
}

void uart_send(void *pvParams) {
    char byte;
    int counter = 0;
    while(1) {
        byte = message[counter++ % strlen(message)];
        uart__put(UART__3,byte,portMAX_DELAY);
        // uart_lab__put_char_into_queue(labUART__3, &byte, portMAX_DELAY);
        // vTaskDelay(pdMS_TO_TICKS(100));
    }
}

int main(void) {
gpio_tx = gpio__construct_as_output(GPIO__PORT_4, 28);
gpio_rx = gpio__construct_as_input(GPIO__PORT_4, 29);

gpio__set_function(gpio_rx, GPIO__FUNCTION_2);
gpio__set_function(gpio_tx, GPIO__FUNCTION_2);

// uart_lab__init(UART__3, b115200, UART_WLS_8_BIT);
// uart__enable_receive_interrupt(labUART__3);
// uart__enable_receive_interrupt(labUART__3);
gpio_tx = gpio__construct_with_function(GPIO__PORT_4, 28,GPIO__FUNCTION_2);
gpio_rx = gpio__construct_with_function(GPIO__PORT_4, 29,GPIO__FUNCTION_2);

tx_queue = xQueueCreate(5, sizeof(char));
rx_queue = xQueueCreate(5, sizeof(char));
uart__init(UART__3, clock__get_peripheral_clock_hz(), 38400);
uart__enable_queues(UART__3, rx_queue, tx_queue);



  // It is advised to either run the uart_task, or the SJ2 command-line (CLI), but not both
  // Change '#if 0' to '#if 1' and vice versa to try it out
#if 0
  // printf() takes more stack space, size this tasks' stack higher
  xTaskCreate(uart_task, "uart", (512U * 8) / sizeof(void *), NULL, PRIORITY_LOW, NULL);
#else
  sj2_cli__init();
#endif

xTaskCreate(uart_send, "uart", (512U * 8) / sizeof(void *), NULL, PRIORITY_LOW, NULL);
//xTaskCreate(uart_receive, "uart", (512U * 8) / sizeof(void *), NULL, PRIORITY_LOW, NULL);

  puts("Starting RTOS");
  vTaskStartScheduler(); // This function never returns unless RTOS scheduler runs out of memory and fails

  return 0;
}
